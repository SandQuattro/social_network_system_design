openapi: 3.0.0
info:
  title: Social Network API
  version: 1.0.0
  description: API спецификация для социальной сети путешественников.
servers:
  - url: http://social-network.dev/v1
    description: Основной сервер
tags:
  - name: User
    description: Управление пользователями
  - name: Posts
    description: Управление постами
  - name: Comments
    description: Управление комментариями
  - name: Likes
    description: Управление лайками
  - name: Search
    description: Поиск постов
  - name: Feed
    description: Лента постов
paths:
  /feed:
    get:
      summary: Получение ленты постов
      tags: [Feed]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список постов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /posts:
    post:
      summary: Создание нового поста
      tags: [Posts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Пост успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/{postId}/comments:
    post:
      summary: Добавление комментария к посту
      tags: [Comments]
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        '201':
          description: Комментарий успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /posts/{postId}/like:
    put:
      summary: Лайк поста
      tags: [Likes]
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Лайк успешно поставлен
  /search:
    get:
      summary: Поиск постов
      tags: [Search]
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Результаты поиска
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /users/register:
    post:
      summary: Регистрация нового пользователя
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /users/login:
    post:
      summary: Вход пользователя
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
    Post:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        content:
          type: string
        media:
          type: array
          items:
            type: string
        geoTag:
          type: string
        createdAt:
          type: string
          format: date-time
    NewPost:
      type: object
      properties:
        content:
          type: string
        media:
          type: string
          format: binary
        geoTag:
          type: string
    Comment:
      type: object
      properties:
        id:
          type: integer
        postId:
          type: string
        user:
          $ref: '#/components/schemas/User'
        content:
          type: string
        createdAt:
          type: string
          format: date-time
    NewComment:
      type: object
      properties:
        content:
          type: string
    UserRegistration:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string